// Code generated by goctl. DO NOT EDIT!
// Source: application.proto

package server

import (
	"context"

	"qbq-open-platform/applicationCenter/rpc/internal/logic/applicationcustomer"
	"qbq-open-platform/applicationCenter/rpc/internal/svc"
	"qbq-open-platform/applicationCenter/rpc/pb"
)

type ApplicationCustomerServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedApplicationCustomerServer
}

func NewApplicationCustomerServer(svcCtx *svc.ServiceContext) *ApplicationCustomerServer {
	return &ApplicationCustomerServer{
		svcCtx: svcCtx,
	}
}

//  应用启用/禁用
func (s *ApplicationCustomerServer) CustomerUpdateState(ctx context.Context, in *pb.CustomerUpdateStateReq) (*pb.CustomerUpdateStateResp, error) {
	l := applicationcustomerlogic.NewCustomerUpdateStateLogic(ctx, s.svcCtx)
	return l.CustomerUpdateState(in)
}

//  创建应用
func (s *ApplicationCustomerServer) CreateApplication(ctx context.Context, in *pb.CreateApplicationReq) (*pb.CreateApplicationResp, error) {
	l := applicationcustomerlogic.NewCreateApplicationLogic(ctx, s.svcCtx)
	return l.CreateApplication(in)
}

//  开通应用
func (s *ApplicationCustomerServer) OpenApplication(ctx context.Context, in *pb.OpenApplicationReq) (*pb.OpenApplicationResp, error) {
	l := applicationcustomerlogic.NewOpenApplicationLogic(ctx, s.svcCtx)
	return l.OpenApplication(in)
}

//  修改应用信息
func (s *ApplicationCustomerServer) UpdateApplicationInfo(ctx context.Context, in *pb.UpdateApplicationInfoReq) (*pb.UpdateApplicationInfoResp, error) {
	l := applicationcustomerlogic.NewUpdateApplicationInfoLogic(ctx, s.svcCtx)
	return l.UpdateApplicationInfo(in)
}
