// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/application.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationApiClient is the client API for ApplicationApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationApiClient interface {
	// 查询可投递的应用列表
	ApiTargetAppList(ctx context.Context, in *ApiTargetAppListReq, opts ...grpc.CallOption) (*ApiTargetAppListResp, error)
}

type applicationApiClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationApiClient(cc grpc.ClientConnInterface) ApplicationApiClient {
	return &applicationApiClient{cc}
}

func (c *applicationApiClient) ApiTargetAppList(ctx context.Context, in *ApiTargetAppListReq, opts ...grpc.CallOption) (*ApiTargetAppListResp, error) {
	out := new(ApiTargetAppListResp)
	err := c.cc.Invoke(ctx, "/pb.ApplicationApi/ApiTargetAppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationApiServer is the server API for ApplicationApi service.
// All implementations must embed UnimplementedApplicationApiServer
// for forward compatibility
type ApplicationApiServer interface {
	// 查询可投递的应用列表
	ApiTargetAppList(context.Context, *ApiTargetAppListReq) (*ApiTargetAppListResp, error)
	mustEmbedUnimplementedApplicationApiServer()
}

// UnimplementedApplicationApiServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationApiServer struct {
}

func (UnimplementedApplicationApiServer) ApiTargetAppList(context.Context, *ApiTargetAppListReq) (*ApiTargetAppListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTargetAppList not implemented")
}
func (UnimplementedApplicationApiServer) mustEmbedUnimplementedApplicationApiServer() {}

// UnsafeApplicationApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationApiServer will
// result in compilation errors.
type UnsafeApplicationApiServer interface {
	mustEmbedUnimplementedApplicationApiServer()
}

func RegisterApplicationApiServer(s grpc.ServiceRegistrar, srv ApplicationApiServer) {
	s.RegisterService(&ApplicationApi_ServiceDesc, srv)
}

func _ApplicationApi_ApiTargetAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTargetAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationApiServer).ApiTargetAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ApplicationApi/ApiTargetAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationApiServer).ApiTargetAppList(ctx, req.(*ApiTargetAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationApi_ServiceDesc is the grpc.ServiceDesc for ApplicationApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ApplicationApi",
	HandlerType: (*ApplicationApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiTargetAppList",
			Handler:    _ApplicationApi_ApiTargetAppList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/application.proto",
}

// ApplicationCustomerClient is the client API for ApplicationCustomer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationCustomerClient interface {
	// 应用启用/禁用
	CustomerUpdateState(ctx context.Context, in *CustomerUpdateStateReq, opts ...grpc.CallOption) (*CustomerUpdateStateResp, error)
	// 创建应用
	CreateApplication(ctx context.Context, in *CreateApplicationReq, opts ...grpc.CallOption) (*CreateApplicationResp, error)
	// 开通应用
	OpenApplication(ctx context.Context, in *OpenApplicationReq, opts ...grpc.CallOption) (*OpenApplicationResp, error)
	// 修改应用信息
	UpdateApplicationInfo(ctx context.Context, in *UpdateApplicationInfoReq, opts ...grpc.CallOption) (*UpdateApplicationInfoResp, error)
}

type applicationCustomerClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationCustomerClient(cc grpc.ClientConnInterface) ApplicationCustomerClient {
	return &applicationCustomerClient{cc}
}

func (c *applicationCustomerClient) CustomerUpdateState(ctx context.Context, in *CustomerUpdateStateReq, opts ...grpc.CallOption) (*CustomerUpdateStateResp, error) {
	out := new(CustomerUpdateStateResp)
	err := c.cc.Invoke(ctx, "/pb.ApplicationCustomer/CustomerUpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationCustomerClient) CreateApplication(ctx context.Context, in *CreateApplicationReq, opts ...grpc.CallOption) (*CreateApplicationResp, error) {
	out := new(CreateApplicationResp)
	err := c.cc.Invoke(ctx, "/pb.ApplicationCustomer/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationCustomerClient) OpenApplication(ctx context.Context, in *OpenApplicationReq, opts ...grpc.CallOption) (*OpenApplicationResp, error) {
	out := new(OpenApplicationResp)
	err := c.cc.Invoke(ctx, "/pb.ApplicationCustomer/OpenApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationCustomerClient) UpdateApplicationInfo(ctx context.Context, in *UpdateApplicationInfoReq, opts ...grpc.CallOption) (*UpdateApplicationInfoResp, error) {
	out := new(UpdateApplicationInfoResp)
	err := c.cc.Invoke(ctx, "/pb.ApplicationCustomer/UpdateApplicationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationCustomerServer is the server API for ApplicationCustomer service.
// All implementations must embed UnimplementedApplicationCustomerServer
// for forward compatibility
type ApplicationCustomerServer interface {
	// 应用启用/禁用
	CustomerUpdateState(context.Context, *CustomerUpdateStateReq) (*CustomerUpdateStateResp, error)
	// 创建应用
	CreateApplication(context.Context, *CreateApplicationReq) (*CreateApplicationResp, error)
	// 开通应用
	OpenApplication(context.Context, *OpenApplicationReq) (*OpenApplicationResp, error)
	// 修改应用信息
	UpdateApplicationInfo(context.Context, *UpdateApplicationInfoReq) (*UpdateApplicationInfoResp, error)
	mustEmbedUnimplementedApplicationCustomerServer()
}

// UnimplementedApplicationCustomerServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationCustomerServer struct {
}

func (UnimplementedApplicationCustomerServer) CustomerUpdateState(context.Context, *CustomerUpdateStateReq) (*CustomerUpdateStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerUpdateState not implemented")
}
func (UnimplementedApplicationCustomerServer) CreateApplication(context.Context, *CreateApplicationReq) (*CreateApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedApplicationCustomerServer) OpenApplication(context.Context, *OpenApplicationReq) (*OpenApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenApplication not implemented")
}
func (UnimplementedApplicationCustomerServer) UpdateApplicationInfo(context.Context, *UpdateApplicationInfoReq) (*UpdateApplicationInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationInfo not implemented")
}
func (UnimplementedApplicationCustomerServer) mustEmbedUnimplementedApplicationCustomerServer() {}

// UnsafeApplicationCustomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationCustomerServer will
// result in compilation errors.
type UnsafeApplicationCustomerServer interface {
	mustEmbedUnimplementedApplicationCustomerServer()
}

func RegisterApplicationCustomerServer(s grpc.ServiceRegistrar, srv ApplicationCustomerServer) {
	s.RegisterService(&ApplicationCustomer_ServiceDesc, srv)
}

func _ApplicationCustomer_CustomerUpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerUpdateStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationCustomerServer).CustomerUpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ApplicationCustomer/CustomerUpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationCustomerServer).CustomerUpdateState(ctx, req.(*CustomerUpdateStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationCustomer_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationCustomerServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ApplicationCustomer/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationCustomerServer).CreateApplication(ctx, req.(*CreateApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationCustomer_OpenApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationCustomerServer).OpenApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ApplicationCustomer/OpenApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationCustomerServer).OpenApplication(ctx, req.(*OpenApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationCustomer_UpdateApplicationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationCustomerServer).UpdateApplicationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ApplicationCustomer/UpdateApplicationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationCustomerServer).UpdateApplicationInfo(ctx, req.(*UpdateApplicationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationCustomer_ServiceDesc is the grpc.ServiceDesc for ApplicationCustomer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationCustomer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ApplicationCustomer",
	HandlerType: (*ApplicationCustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerUpdateState",
			Handler:    _ApplicationCustomer_CustomerUpdateState_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _ApplicationCustomer_CreateApplication_Handler,
		},
		{
			MethodName: "OpenApplication",
			Handler:    _ApplicationCustomer_OpenApplication_Handler,
		},
		{
			MethodName: "UpdateApplicationInfo",
			Handler:    _ApplicationCustomer_UpdateApplicationInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/application.proto",
}
